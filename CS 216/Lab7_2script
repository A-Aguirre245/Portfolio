#!/bin/bash
# run the script with one command line argument, which represents the input file name
# $./Lab7_2script actor_movies.txt
# actor_movies.txt is the input file name as the command line argument
# First, ask the user to input two movie titles
#        if both movie titles are in the actor_movies.txt, continue;
#        otherwise, quit immediately
# Repeatedly display the main menu to let the user choose an option (enter Q or q to quit):
#                       if opiton is A (or a), print all the actors in either of the two movies;
#                       if option is C (or c), print all the common actors in both of the movies;
#                       if option is O (or o), print all the actors who are in one movie, but not in both.
#                       if opiton is Q (or q), quit the script
#                       if other option, display the message of invalid choice.

# Begin with checking whether the number of the command line arguments is exactly one
if [ $# -ne 1 ]
then
    echo "Warning: need exactly one command line argument."
    echo "Usage: $0 <inputfile_name>"
    exit 1
fi

# Ask the user to input two movie titles to search for
echo "Please input the first movie title:"
read movie1
echo "Please input the second movie title:"
read movie2
# Check if both movies are in the input file
# if either one is not, quit the script
# otherwise continue...
if [ `grep -c -i "$movie1" $1` -gt 0 ] && [ `grep -c -i "$movie2" $1` -gt 0 ]
then    
    echo "Your input matches these two movies: "
    grep -m 1 -i -o ";[^;]*$movie1[^;]*;" $1 | cut -d';' -f 2
    grep -m 1 -i -o ";[^;]*$movie2[^;]*;" $1 | cut -d';' -f 2
    echo "Both movies are in the database, please continue..."
    #create two sets for the actors in each movie respectively
    grep -i "$movie1" $1 | cut -f 1 -d';' > actors_in_movie1.txt
    grep -i "$movie2" $1 | cut -f 1 -d';' > actors_in_movie2.txt
else
    echo "Invalid movie title."
    exit 1
fi

# Ask the user to input the option for searching to begin with
echo "Please input your menu option (enter Q or q to quit)"
echo "A --to print all the actors in either of the two movies."
echo "C --to print all the common actors in both of the movies."
echo "O --to print all the actors who are in one movie, but not in both."
read usr_option

# Your script should start here
# create a loop to repeatedly ask the user to input the option for searching until the user enters Q or q to quit
while [ true ]
do
	#union for A
	if [ $usr_option == A ] || [ $usr_option == a ]
	then
		sort -u actors_in_movie1.txt actors_in_movie2.txt
	#intersetction for C	
	else if [ $usr_option == C ] || [ $usr_option == c ]
	then
		sort actors_in_movie1.txt actors_in_movie2.txt | uniq -d
	#Difference for O
	else if [ $usr_option == O ] || [ $usr_option == o ]
	then
		sort actors_in_movie1.txt actors_in_movie2.txt | uniq -u
	#Exits the loop        	
	else if [ $usr_option == Q ] || [ $usr_option == q ]
	then
		break
	#Cacth all for other options
	else
		echo "Inavlid option."
	fi
	fi
	fi
	fi

	echo "Please input your menu option (enter Q or q to quit)"
	echo "A --to print all the actors in either of the two movies."
	echo "C --to print all the common actors in both of the movies."
	echo "O --to print all the actors who are in one movie, but not in both."
	read usr_option

done

#delete the temporary files
echo "Delete all temporary files..."
rm actors_in*.txt
exit 0

